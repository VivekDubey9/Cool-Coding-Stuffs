<snippet>
	<content><![CDATA[
#include<bits/stdc++.h>

using namespace std;

#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define mod 1000000007
#define mod1 998244353
#define INF 1e18
#define nl "\n"
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define f first
#define s second
#define PI 3.141592653589793238462
#define set_bits __builtin_popcountll
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define loop(i,a,b) for(int (i)=(a);(i)<(b);(i)++)
#define fo(i,n)    for(int (i)=0;(i)<n;(i)++)
#define fast_io ios_base::sync_with_stdio(false);cin.tie(NULL)

typedef long long ll;
typedef unsigned long long ull;
typedef long double lld;
// typedef tree<pair<int, int>, null_type, less<pair<int, int>>, rb_tree_tag, tree_order_statistics_node_update > pbds; // find_by_order, order_of_key

#ifndef ONLINE_JUDGE
#define debug(x) cerr << #x <<" "; _print(x); cerr << endl;
#else
#define debug(x)
#endif

void _print(ll t) { cerr << t; } void _print(int t) { cerr << t; } void _print(string t) { cerr << t; } void _print(char t) { cerr << t; } void _print(lld t) { cerr << t; } void _print(double t) { cerr << t; } void _print(ull t) { cerr << t; }

template <class T, class V> void _print(pair<T, V> p) { cerr << "{"; _print(p.first); cerr << ", "; _print(p.second); cerr << "}"; } template <class T> void _print(vector<T> v) { cerr << "[ "; for (T i : v) { _print(i); cerr << " "; } cerr << "]"; } template <class T> void _print(set<T> v) { cerr << "{ "; for (T i : v) { _print(i); cerr << " "; } cerr << "}"; } template <class T> void _print(multiset<T> v) { cerr << "{ "; for (T i : v) { _print(i); cerr << " "; } cerr << "}"; } template <class T, class V> void _print(map<T, V> v) { cerr << "{ "; for (auto i : v) { _print(i); cerr << " "; } cerr << "}"; } template <class T, class V> void _print(unordered_map<T, V> v) { cerr << "{ "; for (auto i : v) { _print(i); cerr << " "; } cerr << "}"; } template <class T> void _print(priority_queue<T> pq) { cerr << "[ "; while (!pq.empty()) { _print(pq.top()); cerr << " "; pq.pop(); } cerr << "]"; } template <class T> void _print(priority_queue<T, vector<T>, greater<T>> pq_min) { cerr << "[ "; while (!pq_min.empty()) { _print(pq_min.top()); cerr << " "; pq_min.pop(); } cerr << "]"; } template <class T> void _print(stack<T> s) { cerr << "[ "; while (!s.empty()) { _print(s.top()); cerr << " "; s.pop(); } cerr << "]"; } template <class T> void _print(queue<T> q) { cerr << "[ "; while (!q.empty()) { _print(q.front()); cerr << " "; q.pop(); } cerr << "]"; } template <class T> void _print(deque<T> d) { cerr << "[ "; for (T i : d) { _print(i); cerr << " "; } cerr << "]"; }

const int N = 1e6 + 5;
ll fact[N];
ll prime[N];
ll spf[N];

ll bin_pow(ll x,ll y){
	ll power = 1;
	while(y){
		if( y & 1){
			y-=1;
			power = (power * x) % mod;
		}
		else {
			x = (x * x) % mod;
			y >>= 1;
		}
	}
	return power;
}

ll mod_inverse(ll n){
	return bin_pow(n,mod-2);
}



void get_fact(){

	fact[0] = 1;
	for(int  i = 1; i < N; i++){
		fact[i] = (i * fact[i-1]) % mod;
	}
	
}

ll ncr(ll n,ll r){
	if( r > n)return 0;
	
	ll numo = fact[n];
	ll deno = (mod_inverse(fact[r]) * mod_inverse(fact[n-r])) % mod;
	ll ans =  (numo * deno) % mod;
	return ans;
}



void sieve(){
	
	for (int i = 0; i < N; i++)
        prime[i] = 1;

    prime[0] = prime[1] = 0;

	for(int i = 2; i * i < N; i++){
		if(prime[i]){
			for(int j = i*i; j < N; j+=i){
				prime[j] = 0;
			}
		}
	}
}

void compute_spf(){
	for (int i = 0; i < N; i++)
        spf[i] = i;

	for(int i = 2; i * i < N; i++){
		if(spf[i] == i){
			for(int j = i*i; j < N; j+=i){
				if(spf[j] == j){
					spf[j] = i;
				}
			}
		}
	}
}

vector<ll> factors(ll x) {
    vector<ll> res;
    while (x != 1) {
        res.push_back(spf[x]);
        x /= spf[x];
    }
    return res;
}


void solve(){

    ll n,r;
    cin >> n >> r;
    debug("hi");
    //cout << ncr(n,r) << endl;
    //cout << prime[4] << nl;
    vector<int> ans = factors(12);
    debug(ans);
    ${0:}
    
}

void sttranzerr(){
    fast_io;
    #ifndef ONLINE_JUDGE
    freopen("inputf.in", "r", stdin);
    freopen("outputf.in", "w", stdout);
    freopen("Error.txt", "w", stderr);
    #endif 
}


int main() {
    sttranzerr();

    get_fact();
    sieve();
    compute_spf();
    int t;
    cin >> t;
    while(t--){
        solve();
    }

    //solve();

}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>nt</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	 <scope>source.c++</scope>
</snippet>
